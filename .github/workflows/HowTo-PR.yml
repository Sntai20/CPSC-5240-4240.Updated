name: Node.js CI/CD

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    env:
      WORKING_DIRECTORY: MongooseDB

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16'

      - name: Install dependencies
        working-directory: ${{ env.WORKING_DIRECTORY }}
        run: npm install

      - name: Compile TypeScript
        working-directory: ${{ env.WORKING_DIRECTORY }}
        run: npx tsc

      - name: Start MongoDB
        uses: supercharge/mongodb-github-action@v1
        with:
          mongodb-version: '5.0'

      - name: Install MongoDB CLI tools
        working-directory: ${{ env.WORKING_DIRECTORY }}
        run: |
          sudo apt-get update
          wget -qO - https://www.mongodb.org/static/pgp/server-5.0.asc | sudo apt-key add -
          echo "deb [ arch=amd64,arm64 ] https://repo.mongodb.org/apt/ubuntu focal/mongodb-org/5.0 multiverse" | sudo tee /etc/apt/sources.list.d/mongodb-org-5.0.list
          sudo apt-get update
          sudo apt-get install -y mongodb-org-shell

      # - name: Populate MongoDB with sample data
      #   working-directory: ${{ env.WORKING_DIRECTORY }}
      #   run: |
      #     if [ -f "createDB/createToDoSampleData.js" ]; then
      #       mongo --eval "load('createDB/createToDoSampleData.js')"
      #     else
      #       echo "Sample data script not found"
      #     fi

      # - name: Populate MongoDB with admin user
      #   working-directory: ${{ env.WORKING_DIRECTORY }}
      #   run: |
      #     if [ -f "createDB/createAdminUser.js" ]; then
      #       mongo --eval "load('createDB/createAdminUser.js')"
      #     else
      #       echo "Admin user script not found"
      #     fi

      - name: Run tests
        working-directory: ${{ env.WORKING_DIRECTORY }}
        run: npm test

      - name: Lint code
        working-directory: ${{ env.WORKING_DIRECTORY }}
        run: npx eslint . --ext .ts

      - name: Start server
        working-directory: ${{ env.WORKING_DIRECTORY }}
        run: |
          node AppServer.js &
          SERVER_PID=$!
          for i in {1..10}; do
            if nc -z localhost 3000; then
              echo "Server is ready"
              break
            fi
            echo "Waiting for server to start..."
            sleep 1
          done
          if ! nc -z localhost 3000; then
            echo "Error: Server failed to start within the expected time."
            kill $SERVER_PID
            exit 1
          fi
          trap "kill $SERVER_PID" EXIT