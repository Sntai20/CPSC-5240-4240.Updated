"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.userRoutes = userRoutes;
const express_1 = require("express");
const passport = require("passport");
function userRoutes(Users) {
    const router = (0, express_1.Router)();
    // Signup
    router.post('/app/signup', (req, res) => __awaiter(this, void 0, void 0, function* () {
        yield Users.createUser(req.body, res);
    }));
    // Login
    router.post('/app/login', (req, res) => __awaiter(this, void 0, void 0, function* () {
        yield Users.loginUser(req, res);
    }));
    // Get all users
    router.get('/app/users', (req, res) => __awaiter(this, void 0, void 0, function* () {
        yield Users.retrieveAllUsers(res);
    }));
    // Google OAuth - Initial authentication
    router.get('/auth/google', passport.authenticate('google', { scope: ['profile', 'email'] }));
    // Google OAuth - Callback handler
    router.get('/auth/google/callback', (req, res, next) => {
        passport.authenticate('google', { failureRedirect: '/' }, (err, user, info) => __awaiter(this, void 0, void 0, function* () {
            if (err || !user) {
                console.error('Authentication failed:', err);
                return res.redirect('/');
            }
            // Establish the login session
            req.login(user, (loginErr) => __awaiter(this, void 0, void 0, function* () {
                if (loginErr) {
                    console.error('Login error:', loginErr);
                    return next(loginErr);
                }
                console.log("Successfully authenticated user and returned to callback page.");
                console.log("User profile:", user);
                try {
                    // Check if user exists by googleId instead of email
                    let dbUser = yield Users.model.findOne({ googleId: user.id }).exec();
                    if (dbUser == null) {
                        console.log("User not found in database, creating new user...");
                        // Create new user object matching your UserModel schema
                        const newUserData = {
                            googleId: user.id,
                            username: user.displayName || user.emails[0].value.split('@')[0], // Fallback username
                            email: user.emails[0].value,
                            points: 0, // Default points
                            // userId will be auto-generated by the schema
                            // hashed_pwd is optional for OAuth users
                        };
                        try {
                            const newUser = new Users.model(newUserData);
                            dbUser = yield newUser.save();
                            console.log("Created new user:", dbUser);
                        }
                        catch (createError) {
                            console.error("Error creating user:", createError);
                            return res.redirect('/?error=user_creation_failed');
                        }
                    }
                    else {
                        console.log("Existing user found:", dbUser);
                    }
                    console.log("Redirecting to Angular frontend...");
                    console.log("Setting user id in cache -- ", dbUser.userId);
                    // Redirect to frontend with user information
                    return res.redirect(`https://localhost:8080/?userId=${dbUser.userId}&username=${encodeURIComponent(dbUser.username)}`);
                    // return res.redirect(`https://tutorialplatformmac-f0e4a3faemd4b4e5.westus-01.azurewebsites.net/welcome/?userId=${dbUser.userId}&username=${encodeURIComponent(dbUser.username)}`);
                }
                catch (e) {
                    console.error("Error handling user:", e);
                    return res.redirect('/?error=database_error');
                }
            }));
        }))(req, res, next);
    });
    // Logout route
    router.get('/auth/logout', (req, res) => {
        req.logout((err) => {
            if (err) {
                console.error('Logout error:', err);
                return res.status(500).json({ message: 'Logout failed' });
            }
            res.redirect('/');
        });
    });
    // Get current user info (protected route)
    router.get('/app/user/current', (req, res) => {
        if (req.isAuthenticated && req.isAuthenticated()) {
            res.json({
                isAuthenticated: true,
                user: req.user
            });
        }
        else {
            res.json({
                isAuthenticated: false,
                user: null
            });
        }
    });
    return router;
}
//# sourceMappingURL=userRoutes.js.map