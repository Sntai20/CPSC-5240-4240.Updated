import { Router } from 'express';
import { UserModel } from '../model/UserModel';
import passport = require('passport');
import * as crypto from 'crypto';

export function userRoutes(Users: UserModel) {
  const router = Router();

  // Signup
  router.post('/app/signup', async (req, res) => {
    await Users.createUser(req.body, res);
  });

  // Login
  router.post('/app/login', async (req, res) => {
    await Users.loginUser(req, res);
  });

  // Get all users
  router.get('/app/users', async (req, res) => {
    await Users.retrieveAllUsers(res);
  });

  // Google OAuth - Initial authentication
  router.get('/auth/google',
    passport.authenticate('google', { scope: ['profile', 'email'] }));

  // Google OAuth - Callback handler
  router.get('/auth/google/callback', (req, res, next) => {
    passport.authenticate('google', { failureRedirect: '/' }, async (err, user, info) => {
      if (err || !user) {
        console.error('Authentication failed:', err);
        return res.redirect('/');
      }

      // Establish the login session
      req.login(user, async (loginErr) => {
        if (loginErr) {
          console.error('Login error:', loginErr);
          return next(loginErr);
        }
        
        console.log("Successfully authenticated user and returned to callback page.");
        console.log("User profile:", user);
        
        try {
          // Check if user exists by googleId instead of email
          let dbUser = await Users.model.findOne({ googleId: user.id }).exec();
          
          if (dbUser == null) {
            console.log("User not found in database, creating new user...");
            
            // Create new user object matching your UserModel schema
            const newUserData = {
              googleId: user.id,
              username: user.displayName || user.emails[0].value.split('@')[0], // Fallback username
              email: user.emails[0].value,
              points: 0, // Default points
              // userId will be auto-generated by the schema
              // hashed_pwd is optional for OAuth users
            };

            try {
              const newUser = new Users.model(newUserData);
              dbUser = await newUser.save();
              console.log("Created new user:", dbUser);
            } catch (createError) {
              console.error("Error creating user:", createError);
              return res.redirect('/?error=user_creation_failed');
            }
          } else {
            console.log("Existing user found:", dbUser);
          }
          
          console.log("Redirecting to Angular frontend...");
          console.log("Setting user id in cache -- ", dbUser.userId);
          
          // Redirect to frontend with user information
          // return res.redirect(`https://localhost:8080/welcome/?userId=${dbUser.userId}&username=${encodeURIComponent(dbUser.username)}`);
          return res.redirect(`https://tutorialplatformmac-f0e4a3faemd4b4e5.westus-01.azurewebsites.net/welcome/?userId=${dbUser.userId}&username=${encodeURIComponent(dbUser.username)}`);
          
        } catch (e) {
          console.error("Error handling user:", e);
          return res.redirect('/?error=database_error');
        }
      });
    })(req, res, next);
  });

  // Logout route
  router.get('/auth/logout', (req, res) => {
    req.logout((err) => {
      if (err) {
        console.error('Logout error:', err);
        return res.status(500).json({ message: 'Logout failed' });
      }
      res.redirect('/');
    });
  });

  // Get current user info (protected route)
  router.get('/app/user/current', (req, res) => {
    if (req.isAuthenticated && req.isAuthenticated()) {
      res.json({
        isAuthenticated: true,
        user: req.user
      });
    } else {
      res.json({
        isAuthenticated: false,
        user: null
      });
    }
  });

  return router;
}